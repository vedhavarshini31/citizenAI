# -*- coding: utf-8 -*-
"""citizenAI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R1YWOLWRXJNlBFPM9I85350bUSpo1vGM
"""

!pip install transformers torch gradio -q
# run this project file in google collab by changing run type to T4 GPU

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM


# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token


def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response


def city_analysis(city_name):
    prompt = f"Provide a detailed analysis of {city_name} including:\n1. Crime Index and safety statistics\n2. Accident rates and traffic safety information\n3. Overall safety assessment\n\nCity: {city_name}\nAnalysis:"
    return generate_response(prompt, max_length=1000)


def citizen_interaction(query):
    prompt = f"As a government assistant, provide accurate and helpful information about the following citizen query related to public services, government policies, or civic issues:\n\nQuery: {query}\nResponse:"
    return generate_response(prompt, max_length=1000)


# Custom CSS for gradient background and styled buttons/headers
custom_css = """
body {
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

h1, .gradio-container h1 {
    color: #fffa;
    text-shadow: 2px 2px 6px rgba(0,0,0,0.3);
}

button {
    background: linear-gradient(45deg, #43cea2, #185a9d);
    color: white !important;
    font-weight: bold;
    border: none;
    padding: 0.5em 1.5em;
    cursor: pointer;
    border-radius: 8px;
    transition: background 0.3s ease;
}

button:hover {
    background: linear-gradient(45deg, #185a9d, #43cea2);
    color: #fff !important;
}

.gr-tabs, .gr-textbox, .gr-markdown {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    padding: 0.8em;
}

.gr-textbox textarea {
    background: rgba(255, 255, 255, 0.2) !important;
    color: white !important;
}
"""

with gr.Blocks(css=custom_css) as app:
    gr.Markdown("# City Analysis & Citizen Services AI")

    with gr.Tabs():
        with gr.TabItem("City Analysis"):
            with gr.Row():
                with gr.Column():
                    city_input = gr.Textbox(
                        label="Enter City Name",
                        placeholder="e.g., New York, London, Mumbai...",
                        lines=1
                    )
                    analyze_btn = gr.Button("Analyze City")

                with gr.Column():
                    city_output = gr.Textbox(label="City Analysis (Crime Index & Accidents)", lines=15)

            analyze_btn.click(city_analysis, inputs=city_input, outputs=city_output)

        with gr.TabItem("Citizen Services"):
            with gr.Row():
                with gr.Column():
                    citizen_query = gr.Textbox(
                        label="Your Query",
                        placeholder="Ask about public services, government policies, civic issues...",
                        lines=4
                    )
                    query_btn = gr.Button("Get Information")

                with gr.Column():
                    citizen_output = gr.Textbox(label="Government Response", lines=15)

            query_btn.click(citizen_interaction, inputs=citizen_query, outputs=citizen_output)

app.launch(share=True)